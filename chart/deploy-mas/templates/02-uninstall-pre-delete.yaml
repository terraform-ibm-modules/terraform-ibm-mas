{{ $ns              :=  printf "mas-uninstall-pipelines" }}
{{ $role_name       :=  "mas-undeploy-role" }}
{{ $secret_name     :=  "mas-undeploy-secret" }}
{{ $crole_name      :=  "mas-undeploy-crole" }}
{{ $sa_name         :=  "mas-undeploy-sa" }}
{{ $scc_name        :=  "mas-undeploy-scc" }}
{{ $rb_name         :=  "mas-undeploy-rb" }}
{{ $crb_name        :=  "mas-undeploy-crb" }}
{{ $job_name        :=  "mas-undeploy-job" }}
{{ $readonly_root_filesystem        :=  printf "%s" .Values.readonly_root_filesystem }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $ns }}

---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $secret_name }}
  namespace: {{ $ns }}
data:
  entitlement_key: {{ .Values.mas_entitlement_key }}
  authorized_entitlement: {{ .Values.mas_license }}
type: Opaque

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $sa_name }}
  namespace: {{ $ns }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $crb_name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: {{ $sa_name }}
  namespace: {{ $ns }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $job_name }}
  generateName: "{{ $job_name }}-"
  namespace: {{ $ns }}
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "10"
  #  checkov.io/skip1: CKV_K8S_20
  #  checkov.io/skip2: CKV_K8S_37

    checkov.io/skip3: CKV_K8S_40
    checkov.io/skip4: CKV_K8S_35
    checkov.io/skip6: CKV_K8S_38
    checkov.io/skip12: CKV_K8S_31
    checkov.io/skip16: CKV_K8S_22

  #  checkov.io/skip5: CKV_K8S_43
  #  checkov.io/skip10: CKV_K8S_29


  #  checkov.io/skip7: CKV_K8S_13
  #  checkov.io/skip8: CKV_K8S_11
  #  checkov.io/skip9: CKV_K8S_10

  #  checkov.io/skip11: CKV_K8S_28

  #  checkov.io/skip13: CKV_K8S_30
  #  checkov.io/skip14: CKV_K8S_12
  #  checkov.io/skip15: CKV_K8S_23


spec:
  ttlSecondsAfterFinished: 120
  template:
    metadata:
      labels:
        app: {{ $job_name }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ $sa_name }}
      securityContext:
        runAsNonRoot: true
      containers:
        - name: {{ $job_name }}
          # 8.0.0-pre.master - sha256:5b5222caecdd860840fd1eb070999e29ed356310474741f76934d0a9f8921d99
          # below sha is for quay.io/ibmmas/cli:8.0.0-pre.mascore-2054 (tag 8.0.0), update it once we get a new release tag
          image: quay.io/ibmmas/cli@sha256:2e82de3f6bf025ccbecbd9c704bca60f884c7a3cef8211690ebec1ba2ae02791

          imagePullPolicy: Always
          securityContext:
            readOnlyRootFilesystem: {{ $readonly_root_filesystem }}
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          command:
            - /bin/sh
            - -c
            - |

              set -e

              echo "MAS_INSTANCE_ID=${MAS_INSTANCE_ID}"
              echo "DEPLOYMENT_FLAVOUR=${DEPLOYMENT_FLAVOUR}"
              DEPLOYMENT_FLAVOUR=${DEPLOYMENT_FLAVOUR:-"core"}

              if [ "${DEPLOYMENT_FLAVOUR}" == "core" ]; then
                echo "Inside helm pre-delete hook and uninstalling MAS Core instance"
                mas uninstall -i "${MAS_INSTANCE_ID}" --no-confirm
                for (( i=0; i<=15; i++ ));
                do
                varstr=$(oc get pr -n mas-${MAS_INSTANCE_ID}-pipelines | grep uninstall | awk -F' ' '{print $3}')
                if [[ $varstr == "Completed"  ]]; then
                echo "Uninstall pipeline has completed successfully"
                break
                elif [[ $varstr == "Running"  ]]; then
                echo "Uninstall pipeline is still running"
                sleep 120
                elif [[ $varstr == "Failed"  ]]; then
                echo "Uninstall pipeline has failed"
                exit
                fi
                done

              elif [ "${DEPLOYMENT_FLAVOUR}" == "manage" ]; then
                echo "Inside helm pre-delete hook and uninstalling MAS Core + Manage instance"
                mas uninstall -i "${MAS_INSTANCE_ID}" --no-confirm
                for (( i=0; i<=15; i++ ));
                do
                varstr=$(oc get pr -n mas-${MAS_INSTANCE_ID}-pipelines | grep uninstall | awk -F' ' '{print $3}')
                if [[ $varstr == "Completed"  ]]; then
                echo "Uninstall pipeline has completed successfully"
                break
                elif [[ $varstr == "Running"  ]]; then
                echo "Uninstall pipeline is still running"
                sleep 120
                elif [[ $varstr == "Failed"  ]]; then
                echo "Uninstall pipeline has failed"
                exit
                fi
                done
                oc delete project db2u
                sleep 600
              fi


          env:
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.mas_instance_id }}"
            - name: DEPLOYMENT_FLAVOUR
              value: "{{ .Values.deployment_flavour }}"

            - name: ENTITLEMENT_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: entitlement_key

            - name: AUTHORIZED_ENTITLEMENT
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: authorized_entitlement

          volumeMounts:
            - name: {{ $secret_name }}
              readOnly: true
              mountPath: /etc/mas/undeploy/secrets
            #- mountPath: /opt/app-root/src
            #  name: app-root-volume

      volumes:
        - name: {{ $secret_name }}
          secret:
            secretName: {{ $secret_name }}
            defaultMode: 420
            optional: false
        #- name: app-root-volume
        #  emptyDir: {}

  backoffLimit: 6