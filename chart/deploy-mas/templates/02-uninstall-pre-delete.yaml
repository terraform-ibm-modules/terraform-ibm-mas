{{ $ns              :=  "mas-uninstall-pipelines" }}
{{ $role_name       :=  "mas-undeploy-role" }}
{{ $secret_name     :=  "mas-undeploy-secret" }}
{{ $crole_name      :=  "mas-undeploy-crole" }}
{{ $sa_name         :=  "mas-undeploy-sa" }}
{{ $scc_name        :=  "mas-undeploy-scc" }}
{{ $rb_name         :=  "mas-undeploy-rb" }}
{{ $crb_name        :=  "mas-undeploy-crb" }}
{{ $job_name        :=  "mas-undeploy-job" }}
{{ $readonly_root_filesystem        :=  printf "%s" .Values.readonly_root_filesystem }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $ns }}

---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $secret_name }}
  namespace: {{ $ns }}
data:
  entitlement_key: {{ .Values.entitlement_key }}
  authorized_entitlement: {{ .Values.mas_license }}
type: Opaque

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $sa_name }}
  namespace: {{ $ns }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $crb_name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: {{ $sa_name }}
  namespace: {{ $ns }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $job_name }}
  generateName: "{{ $job_name }}-"
  namespace: {{ $ns }}
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-weight": "10"

    checkov.io/skip3: CKV_K8S_40
    checkov.io/skip4: CKV_K8S_35
    checkov.io/skip6: CKV_K8S_38
    checkov.io/skip16: CKV_K8S_22

spec:
  ttlSecondsAfterFinished: 120
  template:
    metadata:
      labels:
        app: {{ $job_name }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ $sa_name }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ $job_name }}
          # 8.0.0-pre.master - sha256:5b5222caecdd860840fd1eb070999e29ed356310474741f76934d0a9f8921d99
          # below sha is for quay.io/ibmmas/cli:8.0.0-pre.mascore-2054 (tag 8.0.0), update it once we get a new release tag
          image: quay.io/ibmmas/cli@sha256:f3dca1839a2ff03e178902ccbe704c9a54db574435b35a48a1033fc6d6f1ae45

          imagePullPolicy: Always
          securityContext:
            readOnlyRootFilesystem: {{ $readonly_root_filesystem }}
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          command:
            - /bin/sh
            - -c
            - |

              set -e

              export ENTITLEMENT_KEY=$(cat /etc/mas/deploy/secrets/entitlement_key)
              export AUTHORIZED_ENTITLEMENT=$(cat /etc/mas/deploy/secrets/authorized_entitlement)
              ##echo "ENTITLEMENT_KEY=${ENTITLEMENT_KEY}"
              ##echo "AUTHORIZED_ENTITLEMENT=${AUTHORIZED_ENTITLEMENT}"
              SLS_LICENSE_FILE_LOCAL=/etc/mas/deploy/secrets/authorized_entitlement
              ##echo "------authorized_entitlement.lic--------------"
              ##cat $SLS_LICENSE_FILE_LOCAL
              ##echo "------authorized_entitlement.lic--------------"

              echo "MAS_INSTANCE_ID=${MAS_INSTANCE_ID}"
              echo "MAS_WORKSPACE_ID${MAS_WORKSPACE_ID}"
              echo "MAS_WORKSPACE_NAME=${MAS_WORKSPACE_NAME}"
              echo "MAS_CATALOG_VERSION=${MAS_CATALOG_VERSION}"
              echo "MAS_CHANNEL=${MAS_CHANNEL}"
              echo "SLS_LICENSE_ID=${SLS_LICENSE_ID}"
              ##echo "SLS_LICENSE_FILE_LOCAL=${SLS_LICENSE_FILE_LOCAL}"
              echo "CONTACT_EMAIL=${CONTACT_EMAIL}"
              echo "CONTACT_FIRSTNAME=${CONTACT_FIRSTNAME}"
              echo "CONTACT_LASTNAME=${CONTACT_LASTNAME}"
              echo "STORAGE_CLASS_RWX=${STORAGE_CLASS_RWX}"
              echo "PIPELINE_STORAGE_CLASS=${PIPELINE_STORAGE_CLASS}"
              echo "PIPELINE_STORAGE_ACCESSMODE=${PIPELINE_STORAGE_ACCESSMODE}"
              echo "MANAGE_CHANNEL=${MANAGE_CHANNEL}"
              echo "MANAGE_JDBC_CONFIG_SCOPE=${MANAGE_JDBC_CONFIG_SCOPE}"
              echo "MANAGE_COMPONENTS=${MANAGE_COMPONENTS}"
              echo "DB2U_CHANNEL=${DB2U_CHANNEL}"
              echo "DB2U_CPU_REQUEST=${DB2U_CPU_REQUEST}"
              echo "DB2U_CPU_LIMIT=${DB2U_CPU_LIMIT}"
              echo "DB2U_MEMORY_REQUEST=${DB2U_MEMORY_REQUEST}"
              echo "DB2U_MEMORY_LIMIT=${DB2U_MEMORY_LIMIT}"
              echo "DB2U_BACKUP_STORAGE=${DB2U_BACKUP_STORAGE}"
              echo "DB2U_DATA_STORAGE=${DB2U_DATA_STORAGE}"
              echo "DB2U_LOGS_STORAGE=${DB2U_LOGS_STORAGE}"
              echo "DB2U_META_STORAGE=${DB2U_META_STORAGE}"
              echo "DB2U_TEMP_STORAGE=${DB2U_TEMP_STORAGE}"

              echo "DEPLOYMENT_FLAVOR=${DEPLOYMENT_FLAVOR}"
              DEPLOYMENT_FLAVOR=${DEPLOYMENT_FLAVOR:-"core"}

              if [ "${DEPLOYMENT_FLAVOR}" == "core" ]; then
              echo "Inside helm pre-delete hook and uninstalling MAS Core instance"
              varstr=$(oc get namespaces | grep mas-"${MAS_INSTANCE_ID}"-core | awk -F' ' '{print $2}')
              if [[ $varstr == "Active"  ]]; then
              echo "MAS instance namespace found"
              mas uninstall -i "${MAS_INSTANCE_ID}" --no-confirm
              for (( i=0; i<=15; i++ ));
              do
              varstr2=$(oc get pr -n mas-${MAS_INSTANCE_ID}-pipelines | grep uninstall | awk -F' ' '{print $3}')
              if [[ $varstr2 == "Completed"  ]]; then
              echo "Uninstall pipeline has completed successfully"
              break
              elif [[ $varstr2 == "Running"  ]]; then
              echo "Uninstall pipeline is still running"
              sleep 120
              elif [[ $varstr2 == "Failed"  ]]; then
              echo "Uninstall pipeline has failed"
              exit
              else
              echo "Other error condition"
              exit
              fi
              done
              else
              echo "No MAS instance namespace found due to a failed installation"
              fi
              elif [ "${DEPLOYMENT_FLAVOR}" == "manage" ]; then
              echo "Inside helm pre-delete hook and uninstalling MAS Core + Manage instance"
              varstr=$(oc get namespaces | grep mas-"${MAS_INSTANCE_ID}"-core | awk -F' ' '{print $2}')
              if [[ $varstr == "Active"  ]]; then
              echo "MAS instance namespace found"
              mas uninstall -i "${MAS_INSTANCE_ID}" --no-confirm
              for (( i=0; i<=15; i++ ));
              do
              varstr2=$(oc get pr -n mas-${MAS_INSTANCE_ID}-pipelines | grep uninstall | awk -F' ' '{print $3}')
              if [[ $varstr2 == "Completed"  ]]; then
              echo "Uninstall pipeline has completed successfully"
              break
              elif [[ $varstr2 == "Running"  ]]; then
              echo "Uninstall pipeline is still running"
              sleep 120
              elif [[ $varstr2 == "Failed"  ]]; then
              echo "Uninstall pipeline has failed"
              exit
              else
              echo "Other error condition"
              exit
              fi
              oc delete project db2u
              sleep 600
              done
              else
              echo "No MAS instance namespace found due to a failed installation"
              fi
              fi

          env:
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.mas_instance_id }}"
            - name: DEPLOYMENT_FLAVOR
              value: "{{ .Values.deployment_flavor }}"

            - name: ENTITLEMENT_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: entitlement_key

            - name: AUTHORIZED_ENTITLEMENT
              valueFrom:
                secretKeyRef:
                  name: {{ $secret_name }}
                  key: authorized_entitlement

          volumeMounts:
            - name: {{ $secret_name }}
              readOnly: true
              mountPath: /etc/mas/undeploy/secrets
            #- mountPath: /opt/app-root/src
            #  name: app-root-volume

      volumes:
        - name: {{ $secret_name }}
          secret:
            secretName: {{ $secret_name }}
            defaultMode: 420
            optional: false
        #- name: app-root-volume
        #  emptyDir: {}

  backoffLimit: 6
